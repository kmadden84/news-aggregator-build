{"version":3,"sources":["Components/Header.js","context/news-context.js","Components/NewsToggle.js","Components/NewsItems.js","context/GlobalState.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","React","createContext","newsItems","currentHeadline","errorMsg","pageNum","fetchTopHeadlines","fetchItems","query","NewsToggle","context","useContext","NewsContext","useState","search","setSearch","Container","Row","Form","Group","controlId","Label","Control","as","onChange","e","console","log","preventDefault","target","value","document","getElementById","classList","add","selected","InputGroup","FormControl","placeholder","aria-label","searchState","onKeyDown","key","keySearch","Append","Button","variant","onClick","searchItems","NewsItems","pages","currentPage","useEffect","page_elems_array","Array","from","querySelectorAll","page_elems","forEach","index","remove","map","item","Col","md","lg","Card","Img","src","urlToImage","Body","Title","title","Text","source","name","date","day","getDate","monthIndex","getMonth","year","getFullYear","formattedDate","Date","publishedAt","description","href","url","rel","class","id","GlobalState","setNewsItems","setCurrentHeadline","setErrorMsg","setPageNum","setPages","queryString","setQueryString","Provider","fetch","method","headers","body","JSON","stringify","then","response","json","data","articles","totalpages","Math","round","totalResults","length","pageArray","i","push","catch","err","page","children","App","Boolean","window","location","hostname","match","ReactDOM","render","path","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c6c68097.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Header = props => {\r\n    return(\r\n        <div className=\"header\">\r\n        <h1>Kevin's News Aggregator</h1> \r\n     </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nexport default React.createContext({\r\n  newsItems: [],\r\n  currentHeadline: \"Latest\",\r\n  errorMsg: \"\",\r\n  pageNum: 1,\r\n  fetchTopHeadlines: () => {},\r\n  fetchItems: query => {}\r\n});\r\n","import React, { useContext, useState } from 'react';\r\nimport { Form, Row, Container, Button, InputGroup,FormControl } from 'react-bootstrap';\r\nimport NewsContext from '../context/news-context';\r\n\r\nconst NewsToggle = props => {\r\n\r\n    const context = useContext(NewsContext);\r\n\r\n    const [search, setSearch] = useState('');\r\n\r\n    const fetchItems = (e) => {\r\n        console.log('fetchItems')\r\n        e.preventDefault();\r\n        let query = e.target.value;\r\n        context.fetchItems(query, 1); //set page 1 to default\r\n        console.log(context.newsItems);\r\n        document.getElementById(context.pageNum).classList.add(\"selected\");\r\n\r\n    }\r\n\r\n    \r\n    const searchItems = (e) => {\r\n        console.log('searchItems')\r\n\r\n        e.preventDefault();\r\n        let query = search;\r\n        context.fetchItems(query, 1);//set page 1 to default\r\n        console.log(context.newsItems);\r\n        document.getElementById(context.pageNum).classList.add(\"selected\");\r\n\r\n    }\r\n\r\n    const keySearch = (e) => {\r\n        console.log('keySearch')\r\n        if (e.key === 'Enter') {\r\n        let query = search;\r\n        context.fetchItems(query, 1); //set page 1 to default\r\n        console.log(context.newsItems);\r\n        document.getElementById(context.pageNum).classList.add(\"selected\");\r\n\r\n        }\r\n    }\r\n\r\n    const searchState = (e) => {\r\n        setSearch(e.target.value)\r\n    }\r\n\r\n    return (\r\n        \r\n        <Container>\r\n        <Row className=\"topToggle\">\r\n            <Form>\r\n                <Form.Group controlId=\"exampleForm.ControlSelect1\">\r\n                    <Form.Label>Select News Category</Form.Label>\r\n                    <Form.Control as=\"select\" onChange = {(e)=> fetchItems(e)}>\r\n                    <option value=\"Latest\" selected>Latest News</option>\r\n    \r\n                        <option value=\"Bitcoin\">Bitcoin News</option>\r\n                        <option value=\"Trump\">Trump News</option>\r\n                        <option value=\"Entertainment\">Entertainment News</option>\r\n                        <option value=\"Technology\">Technology</option>\r\n                        <option value=\"Gaming\">Gaming</option>\r\n                    </Form.Control>\r\n                </Form.Group>\r\n            </Form>\r\n            <InputGroup className=\"mb-3\">\r\n            <FormControl\r\n              placeholder=\"Search the news...\"\r\n              aria-label=\"Searcg Box\"\r\n              value={search}\r\n              onChange ={(e)=> searchState(e)}\r\n                onKeyDown = {(e)=> keySearch(e)}\r\n            // onKeyDown = {(e)=> searchItems(e)}\r\n            />\r\n            <InputGroup.Append>\r\n              <Button variant=\"outline-secondary\" onClick = {(e)=> searchItems(e)} >Search</Button>\r\n            </InputGroup.Append>\r\n          </InputGroup>\r\n\r\n        </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default NewsToggle;","import React, { useEffect, useContext } from 'react';\r\nimport NewsContext from '../context/news-context';\r\nimport { Card, Row, Container, Col } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nconst NewsItems = props => {\r\n\r\nconst context = useContext(NewsContext);\r\n\r\nlet newsItems = context.newsItems;\r\nlet pages = context.pages;\r\nlet query = context.query;\r\nlet currentPage = context.pageNum;\r\n\r\nuseEffect(() => {\r\n\r\n  context.fetchTopHeadlines()\r\n}, []);\r\n\r\n\r\n\r\n\r\nuseEffect(() => {\r\n\r\n    var page_elems_array = Array.from(document.querySelectorAll('.pageHolder div'));\r\n    var page_elems = document.getElementById(currentPage);\r\n        page_elems_array.forEach(function(value, index) {\r\n            page_elems_array[index].classList.remove(\"selected\");\r\n        })\r\n        page_elems.classList.add(\"selected\");\r\n\r\n}, [context.newsItems]);\r\n\r\nconst formattedDate = (date) => {\r\n\r\n    if (date) {\r\n\r\n    var monthNames = [\r\n        \"January\", \"February\", \"March\",\r\n        \"April\", \"May\", \"June\", \"July\",\r\n        \"August\", \"September\", \"October\",\r\n        \"November\", \"December\"\r\n      ];\r\n    \r\n      var day = date.getDate();\r\n      var monthIndex = date.getMonth();\r\n      var year = date.getFullYear();\r\n    \r\n      return monthNames[monthIndex] + ' ' + day + ',' + ' ' + year;\r\n\r\n    }\r\n}\r\n\r\nreturn (\r\n        <div>\r\n\r\n            <Container>\r\n            <h2>Current viewing {context.currentHeadline} News</h2>\r\n\r\n                <Row>\r\n                    {\r\n                        (newsItems) \r\n                        ? newsItems.map((item, index) => (                            \r\n                        <Col md={6} lg={4} key={index}>\r\n                            <Card>\r\n                            <div className=\"cardImg\">\r\n                                <Card.Img variant=\"top\" src={item.urlToImage} />\r\n                            </div>\r\n                                <Card.Body>\r\n                                    <Card.Title>{item.title}</Card.Title>\r\n                                    <Card.Text>\r\n                                    {item.source.name} - {formattedDate(new Date(item.publishedAt))}\r\n                                 </Card.Text>\r\n                                    <Card.Text>\r\n                                       {item.description}\r\n                                    </Card.Text>\r\n                                </Card.Body>\r\n                                <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\"></a>\r\n\r\n                            </Card>\r\n                        </Col>\r\n                        ))\r\n\r\n                    : <Col md={4}>\r\n                            <Card>\r\n                                <Card.Body>\r\n                                    <Card.Title>Error</Card.Title>\r\n                                    <Card.Text>\r\n                                       <p>Failed to Fetch Data from News API</p>\r\n                                    </Card.Text>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </Col>  \r\n\r\n                }\r\n                <div class=\"pageHolder\">\r\n                {\r\n                 \r\n                    pages.map((item, index) => (\r\n\r\n                        <div id={index + 1} key={index + 1} onClick={(e)=> context.fetchItems(query, e.target.id)} className=\"pagenumber\">{index + 1}</div>\r\n                    ))\r\n                 }\r\n                </div>\r\n\r\n               \r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n                    \r\n}\r\n\r\nexport default NewsItems;\r\n","import React, { useState } from 'react';\r\n\r\nimport NewsContext from './news-context';\r\n\r\n\r\nconst GlobalState = props => {\r\n\r\n    const [newsItems, setNewsItems] = useState([]);\r\n    const [currentHeadline, setCurrentHeadline] = useState(\"Latest\");\r\n    const [errorMsg, setErrorMsg] = useState('');\r\n    const [pageNum, setPageNum] = useState(\"1\");\r\n    const [pages, setPages] = useState([\"1\"]);\r\n    const [queryString, setQueryString] = useState('');\r\n    //const apiKey = process.env.REACT_APP_APIKey;\r\n    const fetchTopHeadlines = () => {\r\n        console.log('top headlines fetched')\r\n        fetch('/topheadlines', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            \"pageNum\": pageNum,\r\n          })\r\n        }).then((response) => response.json())\r\n          .then((data) => {\r\n              setNewsItems(data.articles);\r\n              console.log(data);\r\n\r\n              var totalpages = Math.round(data.totalResults / data.articles.length);\r\n              var pageArray = [];\r\n              for (var i=1;i<=totalpages;i++) {\r\n                if (i <= 5) {\r\n                pageArray.push(i)\r\n                  }\r\n             }\r\n           setPages(pageArray);\r\n          })\r\n          .catch(err => setErrorMsg(err))\r\n\r\n    };\r\n\r\n    const fetchItems = (query, page) => {\r\n        console.log('category/search/pagenumber toggle fetched');\r\n        console.log('query is: ' + query + ' and page number is:' + pageNum);\r\n        if (page) {\r\n        setPageNum(page);\r\n        }\r\n        setCurrentHeadline(query);\r\n        setQueryString(query);\r\n        let url;\r\n        if (query !== '' && query !== 'Latest') {\r\n            url = `https://newsapi.org/v2/everything?q=${query}&pageSize=20&page=${page}`\r\n        } else {\r\n            url = `https://newsapi.org/v2/top-headlines?country=us&pageSize=20&page=${page}`\r\n        }\r\n        fetch('/fetchitems', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            \"url\": url,\r\n          })\r\n        }).then((response) => response.json())\r\n          .then((data) => {\r\n              setNewsItems(data.articles);\r\n              console.log(data)\r\n              var totalpages = Math.round(data.totalResults / data.articles.length);\r\n              var pageArray = [];\r\n              for (var i=1;i<=totalpages;i++) {\r\n                  if (i <= 5) {\r\n                pageArray.push(i)\r\n                  }\r\n             }\r\n           setPages(pageArray);\r\n           console.log(pageArray)\r\n          })\r\n          .catch((err) => setErrorMsg(err))\r\n    };\r\n\r\n    return (\r\n        <NewsContext.Provider\r\n            value={{\r\n                newsItems: newsItems,\r\n                fetchTopHeadlines: fetchTopHeadlines,\r\n                fetchItems: fetchItems,\r\n                currentHeadline: currentHeadline,\r\n                errorMsg: errorMsg,\r\n                pages: pages,\r\n                query: queryString,\r\n                pageNum: pageNum,\r\n                setPageNum: setPageNum\r\n            }}\r\n        >\r\n            {props.children}\r\n        </NewsContext.Provider>\r\n    );\r\n};\r\n\r\nexport default GlobalState;\r\n","import React from 'react';\n\nimport Header from './Components/Header';\nimport NewsToggle from './Components/NewsToggle'\nimport NewsItems from './Components/NewsItems'\n\nimport './App.css';\nimport GlobalState from './context/GlobalState';\n\nconst App = props => {\n\n\n\n  return (\n    <GlobalState>\n      <Header {...props} />\n      <NewsToggle {...props} />\n      <NewsItems {...props} />\n    </GlobalState>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<BrowserRouter><Route path=\"/\" render={(props) => <App {...props} />}  /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}